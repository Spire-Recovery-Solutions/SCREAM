@page "/storage/storage-target/{Id:long?}"
@using SCREAM.Data.Entities.StorageTargets
@using SCREAM.Data.Enums
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudText Align="Align.Center" Typo="Typo.h5" Class="mb-4">
    @(Model?.Id > 0 ? "Edit" : "New") @(Model?.Type.ToString() ?? _storageType.ToString()) Target
</MudText>

<MudForm @ref="_form">
    <MudStack Spacing="2">
        <MudSelect T="StorageTargetType" @bind-Value="_storageType" Label="Storage Type" Variant="Variant.Outlined"
                   ReadOnly="@(Model?.Id > 0)" Disabled="@(Model?.Id > 0)"
                   SelectedValuesChanged="@((_) => UpdateModelType())">
            <MudSelectItem Value="StorageTargetType.Local">Local Storage</MudSelectItem>
            <MudSelectItem Value="StorageTargetType.S3">S3 Storage</MudSelectItem>
        </MudSelect>

        <MudTextField @bind-Value="_name" Label="Name" Variant="Variant.Outlined" Required="true" />
        <MudTextField @bind-Value="_description" Label="Description" Variant="Variant.Outlined" />

        @if (_storageType == StorageTargetType.Local)
        {
            <MudTextField @bind-Value="_path" Label="Path" Variant="Variant.Outlined" Required="true" />
        }
        else if (_storageType == StorageTargetType.S3)
        {
            <MudTextField @bind-Value="_bucketName" Label="Bucket Name" Variant="Variant.Outlined" Required="true" />
            <MudTextField @bind-Value="_accessKey" Label="Access Key" Variant="Variant.Outlined" Required="true" />
            <MudTextField @bind-Value="_secretKey" Label="Secret Key" Variant="Variant.Outlined" InputType="InputType.Password" Required="true" />
        }
    </MudStack>

    <MudDivider Class="my-3" />

    <MudStack Row="true" Justify="Justify.Center">
        <MudButton OnClick="Cancel" Variant="Variant.Outlined">Cancel</MudButton>
        <MudButton OnClick="SaveTarget" Color="Color.Primary" Variant="Variant.Filled">Test & Save</MudButton>
    </MudStack>
</MudForm>

@code {
    [Parameter] public long? Id { get; set; }
    private MudForm _form;
    private HttpClient _httpClient;
    private JsonSerializerOptions _jsonOptions;

    private StorageTargetType _storageType = StorageTargetType.Local;
    private string _name = string.Empty;
    private string _description = string.Empty;
    private string _path = string.Empty;
    private string _bucketName = string.Empty;
    private string _accessKey = string.Empty;
    private string _secretKey = string.Empty;

    private StorageTarget Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _httpClient = ClientFactory.CreateClient("SCREAM");
        _jsonOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            };

        UpdateModelType();

        if (Id.HasValue)
        {
            try
            {
                Model = await _httpClient.GetFromJsonAsync<StorageTarget>($"/storage/{Id.Value}", _jsonOptions);
                if (Model != null)
                {
                    _storageType = Model.Type;
                    _name = Model.Name;
                    _description = Model.Description ?? string.Empty;

                    switch (Model)
                    {
                        case LocalStorageTarget localTarget:
                            _path = localTarget.Path;
                            break;
                        case S3StorageTarget s3Target:
                            _bucketName = s3Target.BucketName;
                            _accessKey = s3Target.AccessKey;
                            _secretKey = s3Target.SecretKey;
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add("Error fetching target: " + ex.Message, Severity.Error);
                UpdateModelType();
            }
        }
    }

    private void UpdateModelType()
    {
        switch (_storageType)
        {
            case StorageTargetType.Local:
                Model = new LocalStorageTarget
                    {
                        Id = Id ?? 0,
                        Name = _name,
                        Description = string.IsNullOrWhiteSpace(_description) ? null : _description,
                        Type = StorageTargetType.Local,
                        Path = _path
                    };
                break;
            case StorageTargetType.S3:
                Model = new S3StorageTarget
                    {
                        Id = Id ?? 0,
                        Name = _name,
                        Description = string.IsNullOrWhiteSpace(_description) ? null : _description,
                        Type = StorageTargetType.S3,
                        BucketName = _bucketName,
                        AccessKey = _accessKey,
                        SecretKey = _secretKey
                    };
                break;
            default:
                throw new NotSupportedException("Unsupported storage type");
        }
    }

    private async Task SaveTarget()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add("Please fill in the required fields.", Severity.Error);
            return;
        }

        UpdateModelType();

        HttpResponseMessage response;
        try
        {
            response = await _httpClient.PostAsJsonAsync("/storage", Model, _jsonOptions);

            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();

                if (errorContent.Contains("Storage target test failed"))
                {
                    Snackbar.Add("Storage target test failed. Please check your configuration.", Severity.Error);
                }
                else
                {
                    Snackbar.Add($"Error saving target: {response.StatusCode} - {errorContent}", Severity.Error);
                }
                return;
            }

            Snackbar.Add("Storage target saved successfully.", Severity.Success);
            NavigationManager.NavigateTo("/storage/storage-targets");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error saving target: " + ex.Message, Severity.Error);
        }
    }

    private void Cancel() => NavigationManager.NavigateTo("/storage/storage-targets");
}