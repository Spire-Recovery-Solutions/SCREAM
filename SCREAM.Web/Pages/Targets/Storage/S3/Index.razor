@page "/Storage/S3/{id:long?}"
@using SCREAM.Data.Entities.StorageTargets
@inject ISnackbar Snackbar

<MudText Align="Align.Center" Typo="Typo.h5" Class="mb-4">
  S3 Storage Target
</MudText>

<MudForm @ref="_form">
    <MudStack Spacing="2">
        <MudTextField @bind-Value="_s3Target.Name" Label="Name" Variant="Variant.Outlined" Required="true" />
        <MudTextField @bind-Value="_s3Target.Description" Label="Description" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="_s3Target.BucketName" Label="Bucket Name" Variant="Variant.Outlined" Required="true" />
        <MudTextField @bind-Value="_s3Target.AccessKey" Label="Access Key" Variant="Variant.Outlined" Required="true" />
        <MudTextField @bind-Value="_s3Target.SecretKey" Label="Secret Key" Variant="Variant.Outlined" InputType="InputType.Password" Required="true" />
    </MudStack>
    <MudDivider Class="my-3" />
    <MudStack Row="true" Justify="Justify.Center">
        <MudButton OnClick="TestAndSaveS3Target" Color="Color.Primary" Variant="Variant.Filled">
            Test & Save S3 Storage
        </MudButton>
    </MudStack>
</MudForm>

@code {
    [Parameter] public long? Id { get; set; }

    private MudForm _form;
    private S3StorageTarget _s3Target = new S3StorageTarget()
        {
            Name = string.Empty,
            Description = string.Empty,
            BucketName = string.Empty,
            AccessKey = string.Empty,
            SecretKey = string.Empty,
            Type = StorageTargetType.S3
        };

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            // s3Target = await S3StorageService.GetStorageTargetByIdAsync(Id.Value);
            _s3Target = new S3StorageTarget()
                {
                    Id = Id.Value,
                    Name = $"S3 Storage {Id.Value}",
                    Description = "This is fake data for testing.",
                    BucketName = "fake-bucket",
                    AccessKey = "fake-access",
                    SecretKey = "fake-secret",
                    Type = StorageTargetType.S3
                };
        }
    }

    private async Task<bool> TestS3StorageAsync()
    {
        await Task.Delay(500);
        // bool testPassed = await S3StorageService.TestStorageAsync(s3Target);
        bool testPassed = true;
        return testPassed;
    }

    private async Task TestAndSaveS3Target()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add("Please fill in the required fields.", Severity.Error);
            return;
        }

        bool testPassed = await TestS3StorageAsync();
        if (!testPassed)
        {
            Snackbar.Add("S3 storage test failed. Please check your configuration.", Severity.Error);
            return;
        }

        await Task.Delay(500);
        Snackbar.Add("S3 Storage Target saved successfully.", Severity.Success);

        _s3Target = new S3StorageTarget()
            {
                Name = string.Empty,
                Description = string.Empty,
                BucketName = string.Empty,
                AccessKey = string.Empty,
                SecretKey = string.Empty,
                Type = StorageTargetType.S3
            };
        StateHasChanged();
    }
}