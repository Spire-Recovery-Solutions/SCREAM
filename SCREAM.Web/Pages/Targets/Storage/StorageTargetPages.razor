@page "/targets/storage"
@using SCREAM.Data.Entities.StorageTargets
@using SCREAM.Data.Entities.Backup
@using System.Text.Json
@using System.Text.Json.Serialization
@using SCREAM.Web.Pages.Backup
@using SCREAM.Web.Pages.Backup.Dialogs
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Align="Align.Center" Typo="Typo.h6" Class="mb-4">
    Manage Storage Targets
</MudText>

<MudTable Items="@_storageTargets" Dense="true" Hover="true" Striped="true"
          Loading="@_isLoading" LoadingProgressColor="Color.Primary">
    <ToolBarContent>
        <MudStack Row Style="width:100%;" Class="mb-4" Justify="Justify.SpaceBetween">
            <MudButton StartIcon="@Icons.Material.Filled.Add"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="AddNewTarget">
                Add Storage Target
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                       Variant="Variant.Outlined"
                       Color="Color.Default"
                       OnClick="RefreshTargets">
                Refresh
            </MudButton>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>In Use</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Name</MudTd>
        <MudTd>@context.Type</MudTd>
        <MudTd>@context.Description</MudTd>
        <MudTd>
            @{
                bool isInUse = IsStorageTargetInUse(context.Id);
                <MudChip T="string" Color="@(isInUse ? Color.Info : Color.Default)" Size="Size.Small">
                    @(isInUse ? "Yes" : "No")
                </MudChip>
            }
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                           Color="Color.Primary"
                           OnClick="@(() => EditTarget(context))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Error"
                           OnClick="@(() => DeleteTarget(context))"
                           Disabled="@IsStorageTargetInUse(context.Id)" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<StorageTarget> _storageTargets = [];
    private List<BackupPlan> _backupPlans = [];
    private HttpClient _httpClient;
    private JsonSerializerOptions _jsonOptions;
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = ClientFactory.CreateClient("SCREAM");
        _jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            };
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _isLoading = true;
            var storageTargetsTask = _httpClient.GetFromJsonAsync<List<StorageTarget>>("targets/storage", _jsonOptions);
            var backupPlansTask = _httpClient.GetFromJsonAsync<List<BackupPlan>>("plans/backup", _jsonOptions);
            
            await Task.WhenAll(storageTargetsTask, backupPlansTask);
            
            _storageTargets = storageTargetsTask.Result ?? [];
            _backupPlans = backupPlansTask.Result ?? [];
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading data: " + ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private bool IsStorageTargetInUse(long storageTargetId)
    {
        return _backupPlans.Any(bp => bp.StorageTargetId == storageTargetId);
    }

    private void AddNewTarget()
    {
        NavigationManager.NavigateTo("/targets/storage/0");
    }

    private void EditTarget(StorageTarget target)
    {
        NavigationManager.NavigateTo($"/targets/storage/{target.Id}");
    }

    private async Task DeleteTarget(StorageTarget target)
    {
        // Check if the target is in use
        if (IsStorageTargetInUse(target.Id))
        {
            Snackbar.Add("Cannot delete storage target because it's in use by a backup plan.", Severity.Warning);
            return;
        }

        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete the storage target '{target.Name}'?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Confirmation", parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false } && result.Data is bool confirmed && confirmed)
        {
            try
            {
                var response = await _httpClient.DeleteAsync($"targets/storage/{target.Id}");
                if (response.IsSuccessStatusCode)
                {
                    _storageTargets.Remove(target);
                    Snackbar.Add("Storage target deleted.", Severity.Success);
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Failed to delete storage target: {errorContent}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add("Error: " + ex.Message, Severity.Error);
            }
        }
    }

    private async Task RefreshTargets()
    {
        await LoadData();
        Snackbar.Add("Storage targets refreshed.", Severity.Info);
    }
}