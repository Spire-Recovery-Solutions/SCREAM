@page "/targets/connections"
@using SCREAM.Data.Entities
@using SCREAM.Web.Pages.Backup
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Align="Align.Center" Typo="Typo.h6" Class="mb-4">
    Manage Database Connections
</MudText>

<MudTable Items="@_connections" Dense="true" Hover="true" Striped="true"
          Loading="@_isLoading" LoadingProgressColor="Color.Primary">
    <ToolBarContent>
        <MudStack Row Style="width:100%;" Class="mb-4" Justify="Justify.SpaceBetween">
            <MudButton StartIcon="@Icons.Material.Filled.Add"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="AddNewConnection">
                Add Connection
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                       Variant="Variant.Outlined"
                       Color="Color.Default"
                       OnClick="RefreshConnections">
                Refresh
            </MudButton>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Host Name</MudTh>
        <MudTh>Port</MudTh>
        <MudTh>User Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.HostName</MudTd>
        <MudTd>@context.Port</MudTd>
        <MudTd>@context.UserName</MudTd>
        <MudTd>@context.Type</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                           Color="Color.Primary"
                           OnClick="@(() => EditConnection(context))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Error"
                           OnClick="@(() => DeleteConnection(context))" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<DatabaseConnection> _connections = new();
    private HttpClient _httpClient;
    private bool _isLoading = true;
    private JsonSerializerOptions _jsonOptions;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = ClientFactory.CreateClient("SCREAM");
        _jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            };
        await RefreshConnections();
    }

    private void AddNewConnection()
    {
        NavigationManager.NavigateTo("/targets/connections/0");
    }

    private void EditConnection(DatabaseConnection connection)
    {
        NavigationManager.NavigateTo($"/targets/connections/{connection.Id}");
    }

    private async Task DeleteConnection(DatabaseConnection connection)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete the database connection '{connection.HostName}'?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Confirmation", parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false } && result.Data is bool confirmed && confirmed)
        {
            try
            {
                var response = await _httpClient.DeleteAsync($"/connections/{connection.Id}");
                response.EnsureSuccessStatusCode();
                _connections.Remove(connection);
                Snackbar.Add("Database connection deleted successfully.", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting connection: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task RefreshConnections()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            var connections = await _httpClient.GetFromJsonAsync<List<DatabaseConnection>>("/connections", _jsonOptions);
            _connections = connections ?? new List<DatabaseConnection>();
            Snackbar.Add("Connections refreshed.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error fetching connections: {ex.Message}", Severity.Error);
            _connections = new List<DatabaseConnection>();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}