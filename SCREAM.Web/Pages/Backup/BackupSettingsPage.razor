@page "/backup-settings"
@using SCREAM.Business.Services
@* @inject IBackupSettingsService SettingsService *@
@inject ISnackbar Snackbar

    <MudPaper Elevation="3" Class="pa-4 mb-3">
        <MudText Typo="Typo.h4" Class="mb-4">Backup Settings</MudText>

        @if (_loading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else
        {
            <MudForm @ref="_form" Model="@_settings" @bind-IsValid="@_success">
                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudText Typo="Typo.h6" Class="mb-3">General Settings</MudText>
                        
                        <MudNumericField T="int" Label="Maximum Auto-Retries" 
                                        @bind-Value="_settings.MaxAutoRetries"
                                        Min="0" Max="10" Required="true"
                                        RequiredError="Please enter a value"
                                        HelperText="Maximum number of automatic retries for failed backup items" />
                        
                        <MudNumericField T="int" Label="Backup History Retention (days)" 
                                        @bind-Value="_settings.BackupHistoryRetentionDays"
                                        Min="1" Max="365" Required="true" 
                                        RequiredError="Please enter a value"
                                        HelperText="How long to keep backup job history" />
                        
                        <MudTextField Label="Default Max Allowed Packet" 
                                     @bind-Value="_settings.DefaultMaxAllowedPacket" 
                                     Required="true"
                                     RequiredError="Please enter a value"
                                     HelperText="Default maximum allowed packet size for mysqldump (e.g. 64M)" />
                        
                        <MudDivider Class="my-6" />
                        
                        <MudText Typo="Typo.h6" Class="mb-3">Notifications</MudText>
                        
                        <MudSwitch T="string" @bind-Checked="@_settings.SendEmailNotifications" 
                                  Label="Send Email Notifications" 
                                  Color="Color.Primary" />
                        
                        <MudTextField Label="Notification Email" 
                                     @bind-Value="_settings.NotificationEmail" 
                                     Disabled="!_settings.SendEmailNotifications"
                                     Required="@_settings.SendEmailNotifications"
                                     RequiredError="Please enter an email address"
                                     Validation="@(new Func<string, IEnumerable<string>>(ValidateEmail))"
                                     HelperText="Email address for backup job notifications" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  Class="ml-auto" 
                                  Disabled="@(!_success)"
                                  OnClick="SaveSettings">Save Settings</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudForm>
        }
    </MudPaper>

@code {
    private BackupSettings _settings = new();
    private bool _loading = true;
    private bool _success;
    private MudForm _form = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
    }

    private async Task LoadSettings()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            //_settings = await SettingsService.GetSettingsAsync();
         
            // Use fake data for settings
            _settings = new BackupSettings
                {
                    MaxAutoRetries = 3,
                    BackupHistoryRetentionDays = 30,
                    DefaultMaxAllowedPacket = "64M",
                    SendEmailNotifications = false,
                    NotificationEmail = "user@example.com"
                };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading settings: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task SaveSettings()
    {
        await _form.Validate();
        
        if (_success)
        {
            try
            {
                //await SettingsService.UpdateSettingsAsync(_settings);
                Snackbar.Add("Settings saved successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error saving settings: {ex.Message}", Severity.Error);
            }
        }
    }

    private IEnumerable<string> ValidateEmail(string email)
    {
        if (_settings.SendEmailNotifications)
        {
            if (string.IsNullOrWhiteSpace(email))
                yield return "Email is required when notifications are enabled";
            else if (!email.Contains('@') || !email.Contains('.'))
                yield return "Please enter a valid email address";
        }
    }
}