@page "/backup-plans"
@using SCREAM.Data.Entities
@using SCREAM.Data.Enums
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Align="Align.Center" Typo="Typo.h6" Class="mb-4">
    Manage Backup Plans
</MudText>

<MudTable Items="@_backupPlans"
          Dense="true"
          Hover="true"
          Striped="true"
          Loading="@_isLoading"
          LoadingProgressColor="Color.Primary">
    <ToolBarContent>
        <MudStack Row Style="width:100%;" Class="mb-4" Justify="Justify.SpaceBetween">
            <MudButton StartIcon="@Icons.Material.Filled.Add"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="AddNewBackupPlan">
                Add Backup Plan
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                       Variant="Variant.Outlined"
                       Color="Color.Default"
                       OnClick="RefreshBackupPlans">
                Refresh
            </MudButton>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Database</MudTh>
        <MudTh>Storage Target</MudTh>
        <MudTh>Schedule Type</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Name</MudTd>
        <MudTd>@(context.DatabaseConnection?.HostName)</MudTd>
        <MudTd>@(context.StorageTarget?.Name)</MudTd>
        <MudTd>@context.ScheduleType</MudTd>
        <MudTd>
            <MudChip T="bool" Color="@(context.IsActive ? Color.Success : Color.Error)"
                     Size="Size.Small">
                @(context.IsActive ? "Active" : "Inactive")
            </MudChip>
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                           Color="Color.Primary"
                           OnClick="@(() => EditBackupPlan(context))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Error"
                           OnClick="@(() => DeleteBackupPlan(context))" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<BackupPlan> _backupPlans = new();
    private HttpClient _httpClient;
    private bool _isLoading = true;
    private JsonSerializerOptions _jsonOptions;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = ClientFactory.CreateClient("SCREAM");
        _jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            };
        await RefreshBackupPlans();
    }

    private void AddNewBackupPlan()
    {
        NavigationManager.NavigateTo("/backupplan");
    }

    private void EditBackupPlan(BackupPlan backupPlan)
    {
        NavigationManager.NavigateTo($"/backupplan/{backupPlan.Id}");
    }

    private async Task DeleteBackupPlan(BackupPlan backupPlan)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete the backup plan '{backupPlan.Name}'?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Confirmation", parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false } && result.Data is bool confirmed && confirmed)
        {
            try
            {
                var response = await _httpClient.DeleteAsync($"/backup-plans/{backupPlan.Id}");
                response.EnsureSuccessStatusCode();
                _backupPlans.Remove(backupPlan);
                Snackbar.Add("Backup plan deleted successfully.", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting backup plan: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task RefreshBackupPlans()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            var backupPlans = await _httpClient.GetFromJsonAsync<List<BackupPlan>>("/backup-plans", _jsonOptions);
            _backupPlans = backupPlans ?? new List<BackupPlan>();
            Snackbar.Add("Backup plans refreshed.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error fetching backup plans: {ex.Message}", Severity.Error);
            _backupPlans = new List<BackupPlan>();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}