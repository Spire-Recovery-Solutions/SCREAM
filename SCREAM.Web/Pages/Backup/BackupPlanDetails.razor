@page "/plans/backup/{Id:long?}"
@using SCREAM.Data.Entities
@using SCREAM.Data.Entities.Backup
@using SCREAM.Data.Entities.Backup.BackupItems
@using SCREAM.Data.Entities.StorageTargets
@using SCREAM.Data.Enums
@inject ISnackbar Snackbar
@inject IHttpClientFactory ClientFactory
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudCard Elevation="3" Class="mb-4">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">@(Id.HasValue ? "Edit" : "Create") Backup Plan</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudForm @ref="_form" Model="_backupPlan">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_backupPlan.Name"
                                  Label="Plan Name"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_backupPlan.Description"
                                  Label="Description"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudSelect T="long" @bind-Value="_backupPlan.DatabaseTargetId"
                               Label="Database Connection"
                               Variant="Variant.Outlined"
                               Required="true"
                               HelperText="Select the database you want to back up">
                        @if (_databaseTargets == null || _databaseTargets.Count == 0)
                        {
                            <MudSelectItem T="long" Value="0">Select Database Connection</MudSelectItem>
                        }
                        else
                        {
                            <MudSelectItem T="long" Value="0">Select Database Connection</MudSelectItem>
                            @foreach (var conn in _databaseTargets)
                            {
                                <MudSelectItem Value="@conn.Id">
                                    @conn.HostName (@conn.Type)
                                </MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>


                <MudItem xs="12" md="6">
                    <MudSelect T="long" @bind-Value="_backupPlan.StorageTargetId"
                               Label="Storage Target"
                               Variant="Variant.Outlined"
                               Required="true"
                               HelperText="Select where to store your backups">
                        @if (_storageTargets == null || _storageTargets.Count == 0)
                        {
                            <MudSelectItem T="long" Value="0">Select Storage Target</MudSelectItem>
                        }
                        else
                        {
                            <MudSelectItem T="long" Value="0">Select Storage Target</MudSelectItem>
                            @foreach (var target in _storageTargets)
                            {
                                <MudSelectItem Value="@target.Id">
                                    @target.Name (@target.Type)
                                </MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12">
                    <MudGrid Class="mt-2">
                        <MudItem xs="12" md="6">
                            <MudSelect T="ScheduleType"
                                       @bind-Value="_backupPlan.ScheduleType"
                                       Label="Schedule Type"
                                       Variant="Variant.Outlined"
                                       HelperText="How often should this backup run?">
                                @foreach (ScheduleType type in Enum.GetValues(typeof(ScheduleType)))
                                {
                                    <MudSelectItem Value="@type">@type.ToString()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        @if (_backupPlan.ScheduleType != ScheduleType.OneTime)
                        {
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="_backupPlan.ScheduleCron"
                                              Label="Cron Expression"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              HelperText="e.g., '0 0 * * *' for daily at midnight" />
                            </MudItem>
                        }
                        @if (Id.HasValue)
                        {
                            <MudItem xs="12" md="6">
                                <MudSwitch T="bool" @bind-Value="_backupPlan.IsActive"
                                           Color="Color.Primary"
                                           Label="Active" />
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudCardContent>

    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Search"
                   OnClick="ScanDatabase"
                   Disabled="@(_backupPlan.DatabaseTargetId == 0 || _isScanning)"
                   Class="ml-auto">
            @if (_isScanning)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                <span>Scanning...</span>
            }
            else
            {
                <span>@(_backupPlan.Items.Count > 0 ? "Re-Scan" : "Scan") Database</span>
            }
        </MudButton>
    </MudCardActions>
</MudCard>

@if (_backupPlan.DatabaseTargetId != 0 && _backupPlan.Items?.Count > 0)
{
    <MudCard Elevation="3" Class="mt-4 mb-4">
        <MudCardContent>
            <EnhancedBackupTree @bind-Items="_backupPlan.Items" />
        </MudCardContent>
    </MudCard>
}

<MudPaper Class="d-flex justify-center pa-4" Elevation="3">
    <MudButton OnClick="@(() => NavigationManager.NavigateTo("/plans/backup"))">Back</MudButton>
    <MudButton Variant="Variant.Filled"
               Color="Color.Success"
               StartIcon="@Icons.Material.Filled.Save"
               OnClick="SavePlan"
               Disabled="@(_backupPlan.DatabaseTargetId == 0 || _backupPlan.StorageTargetId == 0 || string.IsNullOrWhiteSpace(_backupPlan.Name))">
        Save Backup Plan
    </MudButton>
</MudPaper>

@code {
    [Parameter] public long? Id { get; set; }

    private MudForm _form;
    private BackupPlan _backupPlan = new()
        {
            Name = string.Empty,
            Description = string.Empty,
            ScheduleCron = "0 0 * * *",
            ScheduleType = ScheduleType.OneTime,
            Items = new List<BackupItem>(),
            IsActive = false
        };

    private bool _isScanning;
    private HttpClient _httpClient;
    private List<DatabaseTarget> _databaseTargets = [];
    private List<StorageTarget> _storageTargets = [];

    protected override async Task OnInitializedAsync()
    {
        _httpClient = ClientFactory.CreateClient("SCREAM");

        try
        {
            _databaseTargets = await _httpClient.GetFromJsonAsync<List<DatabaseTarget>>("targets/database") ?? [];
            _storageTargets = await _httpClient.GetFromJsonAsync<List<StorageTarget>>("targets/storage") ?? [];

            if (Id is > 0)
            {
                var plan = await _httpClient.GetFromJsonAsync<BackupPlan>($"plans/backup/{Id.Value}");
                if (plan != null)
                {
                    _backupPlan = plan;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
    }

    private async Task ScanDatabase()
    {
        if (_backupPlan.DatabaseTargetId == 0) return;

        HashSet<string> selectedKeys = [];
        if (_backupPlan.Items.Count > 0)
        {
            var parameters = new DialogParameters
            {
                { "ContentText", "Re-scanning will refresh all database items. Your selections will be preserved where possible. Continue?" },
                { "ButtonText", "Re-Scan" },
                { "Color", Color.Warning }
            };

            var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Re-Scan", parameters);
            var result = await dialog.Result;
            if (result.Canceled) return;

            selectedKeys = _backupPlan.Items
            .Where(i => i.IsSelected)
            .Select(i => $"{i.DatabaseItem.Type}:{i.DatabaseItem.Schema}:{i.DatabaseItem.Name}")
            .ToHashSet();
        }

        _isScanning = true;
        StateHasChanged();

        try
        {
            var response = await _httpClient.PostAsync($"targets/database/{_backupPlan.DatabaseTargetId}/scan", null);
            response.EnsureSuccessStatusCode();

            var newItems = await response.Content.ReadFromJsonAsync<List<BackupItem>>();
            if (newItems != null)
            {
                foreach (var item in newItems)
                {
                    string key = $"{item.DatabaseItem.Type}:{item.DatabaseItem.Schema}:{item.DatabaseItem.Name}";
                    item.IsSelected = _backupPlan.Items.Count == 0 || selectedKeys.Contains(key);
                }

                _backupPlan.Items = newItems;
                Snackbar.Add("Database scanned successfully", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error scanning database: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isScanning = false;
            StateHasChanged();
        }
    }

    private async Task SavePlan()
    {
        await _form.Validate();
        if (!_form.IsValid)
            return;

        var planToSave = new BackupPlan
            {
                Id = _backupPlan.Id,
                Name = _backupPlan.Name,
                Description = _backupPlan.Description,
                DatabaseTargetId = _backupPlan.DatabaseTargetId,
                StorageTargetId = _backupPlan.StorageTargetId,
                ScheduleType = _backupPlan.ScheduleType,
                ScheduleCron = _backupPlan.ScheduleCron,
                IsActive = _backupPlan.IsActive,
                Items = _backupPlan.Items?.Where(i => i.IsSelected).ToList() ?? []
            };

        try
        {
            HttpResponseMessage response = await _httpClient.PostAsJsonAsync("plans/backup", planToSave);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Backup plan {(Id.HasValue ? "updated" : "created")} successfully", Severity.Success);
                NavigationManager.NavigateTo("/plans/backup");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}