@page "/backupplan/{Id:long?}"
@using SCREAM.Data.Entities
@using SCREAM.Data.Entities.StorageTargets
@using SCREAM.Data.Entities.BackupItems
@using SCREAM.Data.Enums
@using System.Text.Json
@using System.Text.Json.Serialization
@inject ISnackbar Snackbar
@inject IHttpClientFactory ClientFactory
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudCard Elevation="3" Class="mb-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">@(Id.HasValue ? "Edit Backup Plan" : "Create Backup Plan")</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent>
            <MudForm @ref="_form" Model="_backupPlan">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_backupPlan.Name"
                                      Label="Plan Name"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      HelperText="Give your backup plan a descriptive name" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_backupPlan.Description"
                                      Label="Description"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      HelperText="Add details about this backup plan" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudSelect T="long"
                                   @bind-Value="_selectedDatabaseConnectionId"
                                   Label="Database Connection"
                                   Variant="Variant.Outlined"
                                   Required="true"
                                   HelperText="Select the database you want to back up">
                            <MudSelectItem T="long" Value="0">Select Database Connection</MudSelectItem>
                            @foreach (var conn in _databaseConnections)
                            {
                                <MudSelectItem Value="@conn.Id">
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.Storage" Class="mr-2" />
                                        @conn.HostName (@conn.Type)
                                    </div>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudSelect T="long"
                                   @bind-Value="_selectedStorageTargetId"
                                   Label="Storage Target"
                                   Variant="Variant.Outlined"
                                   Required="true"
                                   HelperText="Select where to store your backups">
                            <MudSelectItem T="long" Value="0">Select Storage Target</MudSelectItem>
                            @foreach (var target in _storageTargets)
                            {
                                <MudSelectItem Value="@target.Id">
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@(target.Type == StorageTargetType.Local ? Icons.Material.Filled.Folder : Icons.Material.Filled.CloudUpload)"
                                                 Class="mr-2" />
                                        @target.Name (@target.Type)
                                    </div>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudExpansionPanel>
                            <TitleContent>
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="mr-2" />
                                    <MudText Typo="Typo.h6">Schedule Settings</MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Class="mt-2">
                                    <MudItem xs="12" md="6">
                                        <MudSelect T="ScheduleType"
                                                   @bind-Value="_backupPlan.ScheduleType"
                                                   Label="Schedule Type"
                                                   Variant="Variant.Outlined"
                                                   HelperText="How often should this backup run?">
                                            @foreach (ScheduleType type in Enum.GetValues(typeof(ScheduleType)))
                                            {
                                                <MudSelectItem Value="@type">@type.ToString()</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>

                                    @if (_backupPlan.ScheduleType != ScheduleType.OneTime)
                                    {
                                        <MudItem xs="12" md="6">
                                            <MudTextField @bind-Value="_backupPlan.ScheduleCron"
                                                          Label="Cron Expression"
                                                          Variant="Variant.Outlined"
                                                          Required="true"
                                                          HelperText="e.g., '0 0 * * *' for daily at midnight" />
                                        </MudItem>
                                    }
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Search"
                       OnClick="ScanDatabase"
                       Disabled="@(_selectedDatabaseConnectionId == 0 || _isScanning)"
                       Class="ml-auto">
                @if (_isScanning)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    <span>Scanning...</span>
                }
                else
                {
                    <span>Scan Database</span>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>

    @if (_selectedDatabaseConnectionId != 0 && _backupPlan.Items?.Count > 0)
    {
        <MudCard Elevation="3" Class="mt-4 mb-4">
            <MudCardContent>
                <EnhancedBackupTree @bind-Items="_backupPlan.Items" />
            </MudCardContent>
        </MudCard>
    }

    <MudPaper Class="d-flex justify-center pa-4" Elevation="3">
        <MudButton Variant="Variant.Outlined"
                   OnClick="Cancel"
                   Class="mr-4">
            Back
        </MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Success"
                   Size="Size.Large"
                   StartIcon="@Icons.Material.Filled.Save"
                   OnClick="SavePlan"
                   Disabled="@(_selectedDatabaseConnectionId == 0 || _selectedStorageTargetId == 0 || string.IsNullOrWhiteSpace(_backupPlan.Name))">
            Test & Save Backup Plan
        </MudButton>
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public long? Id { get; set; }

    private MudForm _form;
    private long _selectedDatabaseConnectionId;
    private long _selectedStorageTargetId;
    private bool _isScanning;
    private HttpClient _httpClient;
    private JsonSerializerOptions _jsonSerializerOptions;
    private List<DatabaseConnection> _databaseConnections = new();
    private List<StorageTarget> _storageTargets = new();

    private BackupPlan _backupPlan = new()
        {
            Name = string.Empty,
            Description = string.Empty,
            DatabaseConnection = new DatabaseConnection { HostName = string.Empty, UserName = string.Empty, Password = string.Empty, Port = 3306, Type = DatabaseType.MySQL },
            StorageTarget = new LocalStorageTarget { Name = string.Empty, Path = string.Empty, Type = StorageTargetType.Local },
            ScheduleCron = "0 0 * * *",
            ScheduleType = ScheduleType.OneTime,
            Items = new List<BackupItem>(),
            IsActive = false
        };

    protected override async Task OnInitializedAsync()
    {
        _jsonSerializerOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DefaultIgnoreCondition = JsonIgnoreCondition.Never
            };

        _httpClient = ClientFactory.CreateClient("SCREAM");

        try
        {
            _databaseConnections = await _httpClient.GetFromJsonAsync<List<DatabaseConnection>>("/connections", _jsonSerializerOptions);
            _storageTargets = await _httpClient.GetFromJsonAsync<List<StorageTarget>>("/storage-targets", _jsonSerializerOptions);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }

        // If editing an existing backup plan, fetch it
        if (Id.HasValue)
        {
            try
            {
                var backupPlan = await _httpClient.GetFromJsonAsync<BackupPlan>($"/backup-plans/{Id.Value}", _jsonSerializerOptions);
                if (backupPlan != null)
                {
                    _backupPlan = backupPlan;
                    _selectedDatabaseConnectionId = _backupPlan.DatabaseConnection?.Id ?? 0;
                    _selectedStorageTargetId = _backupPlan.StorageTarget?.Id ?? 0;

                    // If items are already selected, we should scan the database to get the full tree
                    if (_backupPlan.Items?.Count > 0 && _selectedDatabaseConnectionId > 0)
                    {
                        await ScanDatabase();
                    }
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error loading backup plan: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ScanDatabase()
    {
        if (_selectedDatabaseConnectionId == 0)
            return;

        _isScanning = true;
        StateHasChanged();

        try
        {
            var response = await _httpClient.PostAsync($"connections/{_selectedDatabaseConnectionId}/scan", null);
            response.EnsureSuccessStatusCode();

            var backupItems = await response.Content.ReadFromJsonAsync<List<BackupItem>>(_jsonSerializerOptions);

            if (backupItems is not null)
            {
                if (Id.HasValue && _backupPlan.Items?.Count > 0)
                {
                    var selectedItemIds = _backupPlan.Items.Where(i => i.IsSelected).Select(i => i.Id).ToHashSet();
                    foreach (var item in backupItems)
                    {
                        item.IsSelected = selectedItemIds.Contains(item.Id);
                    }
                }

                _backupPlan.Items = backupItems;
                Snackbar.Add("Database scanned successfully.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Something went wrong: No backup items returned.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error scanning database: {ex.Message}", Severity.Error);
            _backupPlan.Items = new List<BackupItem>();
        }
        finally
        {
            _isScanning = false;
            StateHasChanged();
        }
    }

    private async Task SavePlan()
    {
        await _form.Validate();

        if (!_form.IsValid)
            return;

        _backupPlan.DatabaseConnection = _databaseConnections.FirstOrDefault(c => c.Id == _selectedDatabaseConnectionId) ??
            new DatabaseConnection { Id = _selectedDatabaseConnectionId, HostName = string.Empty, UserName = string.Empty, Password = string.Empty, Port = 0, Type = DatabaseType.MySQL };

        _backupPlan.StorageTarget = _storageTargets.FirstOrDefault(t => t.Id == _selectedStorageTargetId) ??
            new LocalStorageTarget { Id = _selectedStorageTargetId, Name = string.Empty, Path = string.Empty, Type = StorageTargetType.Local };

        _backupPlan.Items = _backupPlan.Items.Where(i => i.IsSelected).ToList();
        _backupPlan.IsActive = false;

        // Show confirmation dialog
        var confirmParameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to {(Id.HasValue ? "update" : "create")} backup plan '{_backupPlan.Name}' with {_backupPlan.Items.Count} items selected?" },
            { "ButtonText", "Confirm" },
            { "Color", Color.Primary }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>($"Confirm Backup Plan {(Id.HasValue ? "Update" : "Creation")}", confirmParameters);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        try
        {
            if (Id.HasValue)
            {
                _backupPlan.Id = Id.Value;
            }

            var response = await _httpClient.PostAsJsonAsync("/backup-plans", _backupPlan, _jsonSerializerOptions);
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error {(Id.HasValue ? "updating" : "creating")} backup plan: {error}", Severity.Error);
                return;
            }

            Snackbar.Add($"Backup plan {(Id.HasValue ? "updated" : "created")} successfully.", Severity.Success);
            NavigationManager.NavigateTo("/backup-plans");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error {(Id.HasValue ? "updating" : "creating")} backup plan: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel() => NavigationManager.NavigateTo("/backup-plans");
}