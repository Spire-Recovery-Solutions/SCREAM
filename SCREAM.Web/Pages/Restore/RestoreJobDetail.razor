@page "/jobs/restore/{JobId:long}"
@using SCREAM.Data.Entities
@using SCREAM.Data.Entities.Database
@using SCREAM.Data.Entities.Restore
@using SCREAM.Data.Entities.Backup
@using SCREAM.Data.Entities.Backup.BackupItems
@using SCREAM.Data.Enums
@using SCREAM.Web.Pages.Backup.Dialogs
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IHttpClientFactory ClientFactory

@if (_loading)
{
    <MudPaper Elevation="0" Class="pa-6 d-flex flex-column align-center">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" Class="mb-4" />
    </MudPaper>
}
else if (_job == null || _restorePlan == null)
{
    <MudAlert Severity="Severity.Error">Restore job not found.</MudAlert>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4">
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudStack>
                        <MudText Typo="Typo.h5">@_restorePlan.Name</MudText>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">
                            @_restorePlan.Description
                        </MudText>
                    </MudStack>
                    <MudStack Row>
                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ArrowBack"
                                   OnClick="GoBack">
                            Back
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Refresh"
                                   OnClick="RefreshData">
                            Refresh
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="4">
            <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-3">Job Details</MudText>
                <MudDivider Class="mb-4" />

                <MudList T="string">
                    <MudListItem>
                        <MudText Typo="Typo.body1">
                            <MudIcon Icon="@Icons.Material.Filled.Badge" Class="mr-2" />
                            <strong>Job ID:</strong> @_job.Id
                        </MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.body1">
                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="mr-2" />
                            <strong>Started:</strong> @_job.StartedAt.ToLocalTime().ToString("g")
                        </MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.body1">
                            <MudIcon Icon="@Icons.Material.Filled.Storage" Class="mr-2" />
                            <strong>Database:</strong> @_restorePlan.DatabaseTarget.HostName
                        </MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.body1">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                            <strong>Source Backup:</strong> @_restorePlan.SourceBackupPlan.Name
                        </MudText>
                    </MudListItem>
                    <MudListItem>
                        <MudText Typo="Typo.body1">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                            <strong>Status:</strong>
                            <MudChip T="string" Color="@GetStatusColor(_job.Status)" Size="Size.Small" Class="ml-2">
                                @_job.Status.ToString()
                            </MudChip>
                        </MudText>
                    </MudListItem>
                </MudList>
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.subtitle2" Class="mt-4 mb-2">Overall Progress</MudText>
                <MudProgressLinear Color="@GetProgressColor(_job.Status)"
                                   Value="@_overallProgress"
                                   Striped="@(_job.Status == TaskStatus.Running)"
                                   Indeterminate="@(_job.Status == TaskStatus.Running && _overallProgress < 5)" />
                <MudText Typo="Typo.body2" Align="Align.Center">
                    @_overallProgress.ToString("0.#")%
                </MudText>

                @if (_job.Status == TaskStatus.Faulted)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Warning"
                               StartIcon="@Icons.Material.Filled.Replay" FullWidth
                               OnClick="RetryFullJob" Class="mt-3">
                        Retry Job
                    </MudButton>
                }
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="8">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4">
                <MudTabPanel Text="Restore Items" Icon="@Icons.Material.Filled.List">
                    <MudTable Items="@_itemStatuses" Loading="@_loading" Dense="true" Hover="true"
                              Filter="new Func<RestoreItemStatusViewModel, bool>(FilterItems)">
                        <ToolBarContent>
                            <MudTextField @bind-Value="_searchString" Placeholder="Search"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                                          Class="mt-0 mb-3"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Type</MudTh>
                            <MudTh>Name</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Progress</MudTh>
                            <MudTh>Duration</MudTh>
                            <MudTh>Retries</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <MudChip T="string" Color="@GetItemTypeColor(context.ItemType)" Size="Size.Small">
                                    @context.ItemType.ToString()
                                </MudChip>
                            </MudTd>
                            <MudTd>
                                <MudTooltip Text="@GetTooltipForItem(context)">
                                    @context.ItemName
                                </MudTooltip>
                            </MudTd>
                            <MudTd>
                                <MudChip T="string" Color="@GetExecutionStatusColor(context.Status)" Size="Size.Small">
                                    @context.Status.ToString()
                                </MudChip>
                            </MudTd>
                            <MudTd>
                                <MudProgressLinear Color="@GetExecutionStatusColor(context.Status)"
                                                   Value="@GetItemProgressValue(context.Status)"
                                                   Striped="@(context.Status == TaskStatus.Running)" />
                            </MudTd>
                            <MudTd>
                                @GetItemDuration(context)
                            </MudTd>
                            <MudTd>
                                @context.RetryCount
                            </MudTd>
                            <MudTd>
                                @if (context.Status == TaskStatus.Faulted)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Replay"
                                                   Color="Color.Warning"
                                                   OnClick="@(() => RetryItem(context.Id))" />
                                }
                                @if (!string.IsNullOrEmpty(context.ErrorMessage))
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Error"
                                                   Color="Color.Error"
                                                   OnClick="@(() => ShowErrorDetails(context))" />
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>

                <MudTabPanel Text="Logs" Icon="@Icons.Material.Filled.Assignment">
                    <MudText Typo="Typo.subtitle1" Class="mb-2">Job Execution Log</MudText>
                    @if (_jobLogs.Count == 0)
                    {
                        <MudAlert Severity="Severity.Info">No logs available for this job.</MudAlert>
                    }
                    else
                    {
                        <MudPaper Class="pa-2" Style="height: 400px; background-color: #1e1e1e; overflow: hidden;">
                            <MudVirtualize Items="_jobLogs" Context="log">
                                <div class="d-flex py-1">
                                    <span class="mr-2"
                                          style="color: #8a8a8a; min-width: 130px; font-family: Consolas, monospace; font-size: 0.85rem;">
                                        @log.Timestamp.ToLocalTime().ToString("HH:mm:ss.fff")
                                    </span>
                                    <span class="mr-2"
                                          style="color: @GetLogLevelColorCode(log.Severity); min-width: 80px; font-weight: 600; font-family: Consolas, monospace;">
                                        @log.Severity
                                    </span>
                                    <span style="font-family: Consolas, monospace; color: #d4d4d4; overflow-wrap: anywhere;">
                                        @if (!string.IsNullOrEmpty(log.Title))
                                        {
                                            <span style="color: #52b0ef; font-weight: 500;">[@log.Title] </span>
                                        }
                                        <span>@log.Message</span>
                                    </span>
                                </div>
                            </MudVirtualize>
                        </MudPaper>
                    }
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter] public long JobId { get; set; }

    private RestoreJob? _job;
    private RestorePlan? _restorePlan;
    private List<RestoreItemStatusViewModel> _itemStatuses = new();
    private List<RestoreJobLogViewModel> _jobLogs = new();
    private bool _loading = true;
    private string _searchString = "";
    private float _overallProgress = 0;
    private System.Timers.Timer? _refreshTimer;
    private HttpClient _httpClient;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = ClientFactory.CreateClient("SCREAM");

        _refreshTimer = new System.Timers.Timer(5000);
        _refreshTimer.Elapsed += async (sender, e) => await InvokeAsync(async () => await RefreshIfRunning());
        _refreshTimer.Start();
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        StateHasChanged();

        try
        {
            _job = await _httpClient.GetFromJsonAsync<RestoreJob>($"jobs/restore/{JobId}");
            if (_job == null)
            {
                Snackbar.Add("Restore job not found", Severity.Error);
                return;
            }
            _restorePlan = await _httpClient.GetFromJsonAsync<RestorePlan>($"plans/restore/{_job.RestorePlanId}");
            if (_restorePlan == null)
            {
                Snackbar.Add("Restore plan not found", Severity.Error);
                return;
            }
            _itemStatuses = _job.RestoreItems.Select(item => new RestoreItemStatusViewModel
                {
                    Id = item.Id,
                    ItemId = item.DatabaseItemId,
                    ItemName = GetItemName(item.DatabaseItem),
                    ItemType = item.DatabaseItem.Type,
                    Status = item.Status,
                    RetryCount = item.RetryCount,
                    StartedAt = item.StartedAt,
                    CompletedAt = item.CompletedAt,
                    ErrorMessage = item.ErrorMessage
                }).ToList();

            // Load job logs from the API.
            await LoadJobLogs();
            CalculateOverallProgress();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading restore job: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadJobLogs()
    {
        try
        {
            var logs = await _httpClient.GetFromJsonAsync<List<RestoreJobLog>>($"jobs/restore/{JobId}/logs");
            _jobLogs = logs?
                .Select(l => new RestoreJobLogViewModel
                    {
                        Id = l.Id,
                        Timestamp = l.Timestamp,
                        Title = l.Title,
                        Message = l.Message,
                        Severity = l.Severity
                    })
                .OrderByDescending(l => l.Timestamp)
                .ToList() ?? new List<RestoreJobLogViewModel>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading job logs: {ex.Message}", Severity.Error);
        }
    }

    private void CalculateOverallProgress()
    {
        if (_job == null || _itemStatuses.Count == 0)
            return;

        if (_job.Status == TaskStatus.RanToCompletion)
        {
            _overallProgress = 100;
            return;
        }

        if (_job.Status == TaskStatus.WaitingToRun)
        {
            _overallProgress = 0;
            return;
        }

        float completedWeight = 0;
        float totalWeight = _itemStatuses.Count;

        foreach (var status in _itemStatuses)
        {
            switch (status.Status)
            {
                case TaskStatus.RanToCompletion:
                    completedWeight += 1.0f;
                    break;
                case TaskStatus.Running:
                    completedWeight += 0.5f;
                    break;
                case TaskStatus.WaitingToRun:
                    completedWeight += 0.3f;
                    break;
                case TaskStatus.Faulted:
                case TaskStatus.Created:
                case TaskStatus.Canceled:
                    completedWeight += 0.0f;
                    break;
            }
        }

        _overallProgress = (completedWeight / totalWeight) * 100;
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private async Task RefreshIfRunning()
    {
        if (_job?.Status == TaskStatus.Running)
        {
            await LoadData();
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/jobs/restore");
    }

    private async Task RetryFullJob()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to retry the entire restore job?" },
            { "ButtonText", "Retry" },
            { "Color", Color.Warning }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm", parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            try
            {
                // Call the API endpoint to retry the full job.
                var retryResponse = await _httpClient.PostAsync($"jobs/restore/{JobId}/retry", null);
                if (retryResponse.IsSuccessStatusCode)
                {
                    Snackbar.Add("Restore job retry initiated", Severity.Success);
                    await LoadData();
                }
                else
                {
                    var error = await retryResponse.Content.ReadAsStringAsync();
                    Snackbar.Add($"Error retrying restore job: {error}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error retrying restore job: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task RetryItem(long itemId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to retry this restore item?" },
            { "ButtonText", "Retry" },
            { "Color", Color.Warning }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm", parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            try
            {
                // Call the API endpoint to retry a specific restore item.
                var retryResponse = await _httpClient.PostAsync($"jobs/restore/items/{JobId}/{itemId}/retry", null);
                if (retryResponse.IsSuccessStatusCode)
                {
                    Snackbar.Add("Restore item retry initiated", Severity.Success);
                    await LoadData();
                }
                else
                {
                    var error = await retryResponse.Content.ReadAsStringAsync();
                    Snackbar.Add($"Error retrying restore item: {error}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error retrying restore item: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ShowErrorDetails(RestoreItemStatusViewModel item)
    {
        var parameters = new DialogParameters
        {
            { "Title", $"Error Details: {item.ItemName}" },
            { "Message", item.ErrorMessage ?? "No error details available." }
        };

        await DialogService.ShowAsync<ErrorDetailsDialog>("Error Details", parameters);
    }

    private bool FilterItems(RestoreItemStatusViewModel item)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (item.ItemName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (item.ItemType.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (item.Status.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private string GetItemName(DatabaseItem databaseItem)
    {
        return string.IsNullOrEmpty(databaseItem.Name)
            ? $"{databaseItem.Schema} ({databaseItem.Type})"
            : $"{databaseItem.Schema}.{databaseItem.Name}";
    }

    private string GetTooltipForItem(RestoreItemStatusViewModel item)
    {
        var schema = item.ItemName.Split('.').FirstOrDefault() ?? "N/A";
        return $"Schema: {schema}\nType: {item.ItemType}";
    }

    private string GetItemDuration(RestoreItemStatusViewModel item)
    {
        if (!item.StartedAt.HasValue)
            return "-";

        var end = item.CompletedAt ?? DateTime.Now;
        var duration = end - item.StartedAt.Value;

        return duration.TotalHours >= 1
            ? $"{(int)duration.TotalHours}h {duration.Minutes}m {duration.Seconds}s"
            : duration.TotalMinutes >= 1
                ? $"{duration.Minutes}m {duration.Seconds}s"
                : $"{duration.Seconds}s";
    }

    private float GetItemProgressValue(TaskStatus status)
    {
        return status switch
        {
            TaskStatus.RanToCompletion => 100,
            TaskStatus.Faulted => 100,
            TaskStatus.Canceled => 100,
            TaskStatus.Running => 50,
            TaskStatus.WaitingToRun => 25,
            TaskStatus.Created => 0,
            _ => 0
        };
    }

    private Color GetStatusColor(TaskStatus status)
    {
        return status switch
        {
            TaskStatus.Running => Color.Info,
            TaskStatus.RanToCompletion => Color.Success,
            TaskStatus.Faulted => Color.Error,
            TaskStatus.WaitingToRun => Color.Default,
            _ => Color.Default
        };
    }

    private Color GetProgressColor(TaskStatus status)
    {
        return GetStatusColor(status);
    }

    private Color GetExecutionStatusColor(TaskStatus status)
    {
        return status switch
        {
            TaskStatus.Running => Color.Info,
            TaskStatus.RanToCompletion => Color.Success,
            TaskStatus.Faulted => Color.Error,
            TaskStatus.Created => Color.Default,
            TaskStatus.Canceled => Color.Dark,
            TaskStatus.WaitingToRun => Color.Warning,
            _ => Color.Default
        };
    }

    private Color GetItemTypeColor(DatabaseItemType type)
    {
        return type switch
        {
            DatabaseItemType.TableStructure => Color.Primary,
            DatabaseItemType.TableData => Color.Info,
            DatabaseItemType.View => Color.Secondary,
            DatabaseItemType.Trigger => Color.Tertiary,
            DatabaseItemType.Event => Color.Warning,
            DatabaseItemType.FunctionProcedure => Color.Success,
            _ => Color.Default
        };
    }

    private string GetLogLevelColorCode(LogLevel severity)
    {
        return severity switch
        {
            LogLevel.Error => "#ff5252",
            LogLevel.Warning => "#fb8c00",
            LogLevel.Information => "#29b6f6",
            LogLevel.Debug => "#9e9e9e",
            _ => "#d4d4d4"
        };
    }

    public void Dispose()
    {
        _refreshTimer?.Stop();
        _refreshTimer?.Dispose();
    }

    public class RestoreItemStatusViewModel
    {
        public long Id { get; set; }
        public long ItemId { get; set; }
        public string ItemName { get; set; } = string.Empty;
        public DatabaseItemType ItemType { get; set; }
        public TaskStatus Status { get; set; }
        public int RetryCount { get; set; }
        public DateTime? StartedAt { get; set; }
        public DateTime? CompletedAt { get; set; }
        public string? ErrorMessage { get; set; }
    }

    public class RestoreJobLogViewModel
    {
        public long Id { get; set; }
        public DateTime Timestamp { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public LogLevel Severity { get; set; }
    }
}