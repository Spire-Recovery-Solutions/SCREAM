@page "/plans/restore"
@using System.Text.Json
@using SCREAM.Data.Entities.Restore
@using SCREAM.Data.Entities.Backup.BackupItems
@using SCREAM.Data.Enums
@using SCREAM.Web.Pages.Backup
@using SCREAM.Web.Pages.Backup.Dialogs
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Align="Align.Center" Typo="Typo.h6" Class="mb-4">
    Manage Restore Plans
</MudText>

<MudTable Items="@_restorePlans"
          Dense="true"
          Hover="true"
          Striped="true"
          Loading="@_isLoading"
          LoadingProgressColor="Color.Primary">
    <ToolBarContent>
        <MudStack Row Style="width:100%;" Class="mb-4" Justify="Justify.SpaceBetween">
            <MudButton StartIcon="@Icons.Material.Filled.Add"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="AddNewRestorePlan">
                Add Restore Plan
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                       Variant="Variant.Outlined"
                       Color="Color.Default"
                       OnClick="RefreshRestorePlans">
                Refresh
            </MudButton>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Database</MudTh>
        <MudTh>Source Backup Plan</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Schedule Type</MudTh>
        <MudTh>Next Run</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Name</MudTd>
        <MudTd>@(context.DatabaseTarget?.HostName)</MudTd>
        <MudTd>@context.SourceBackupPlan?.Name</MudTd>
        <MudTd>
            <MudChip T="bool" Color="@(context.IsActive ? Color.Success : Color.Error)"
                     Size="Size.Small">
                @(context.IsActive ? "Active" : "Inactive")
            </MudChip>
        </MudTd>
        <MudTd>@context.ScheduleType</MudTd>
        <MudTd>@(context.NextRun.HasValue ? context.NextRun.Value.ToString("g") : "-")</MudTd>
        <MudTd>
            <MudTooltip Text="@context.Description">
                <span style="display: block; white-space: normal; word-break: break-word;">
                    @context.Description
                </span>
            </MudTooltip>
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                           Color="Color.Primary"
                           OnClick="@(() => EditRestorePlan(context))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Error"
                           OnClick="@(() => DeleteRestorePlan(context))" />
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<RestorePlan> _restorePlans = new();
    private HttpClient _httpClient;
    private bool _isLoading = true;
    private JsonSerializerOptions _jsonOptions;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = ClientFactory.CreateClient("SCREAM");
        _jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
            };
        await RefreshRestorePlans();
    }

    private void AddNewRestorePlan()
    {
        NavigationManager.NavigateTo("/plans/restore/0");
    }

    private void EditRestorePlan(RestorePlan restorePlan)
    {
        NavigationManager.NavigateTo($"/plans/restore/{restorePlan.Id}");
    }

    private async Task DeleteRestorePlan(RestorePlan restorePlan)
    {
        var parameters = new DialogParameters
    {
        { "ContentText", $"Are you sure you want to delete the restore plan '{restorePlan.Name}'?" },
        { "ButtonText", "Delete" },
        { "Color", Color.Error }
    };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Confirmation", parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false } && result.Data is bool confirmed && confirmed)
        {
            try
            {
                var response = await _httpClient.DeleteAsync($"plans/restore/{restorePlan.Id}");
                if (response.IsSuccessStatusCode)
                {
                    _restorePlans.RemoveAll(p => p.Id == restorePlan.Id);
                    Snackbar.Add("Restore plan deleted successfully.", Severity.Success);
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Error deleting restore plan: {error}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting restore plan: {ex.Message}", Severity.Error);
            }
            finally
            {
                StateHasChanged();
            }
        }
    }

    private async Task RefreshRestorePlans()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            var plans = await _httpClient.GetFromJsonAsync<List<RestorePlan>>("plans/restore");
            if (plans != null)
            {
                _restorePlans = plans;
                Snackbar.Add("Restore plans loaded from API.", Severity.Success);
            }
            else
            {
                Snackbar.Add("No restore plans found.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error fetching restore plans: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}