@page "/plans/restore/{Id:long?}"
@using SCREAM.Data.Entities
@using SCREAM.Data.Entities.Database
@using SCREAM.Data.Entities.Restore
@using SCREAM.Data.Entities.Backup
@using SCREAM.Data.Entities.Backup.BackupItems
@using SCREAM.Data.Enums
@using SCREAM.Web.Pages.Backup
@using SCREAM.Web.Pages.Backup.Dialogs
@inject ISnackbar Snackbar
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudCard Elevation="3" Class="mb-4">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">@(Id is > 0 ? "Edit" : "Create") Restore Plan</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudForm @ref="_form" Model="_restorePlan">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_restorePlan.Name"
                                  Label="Plan Name"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_restorePlan.Description"
                                  Label="Description"
                                  Variant="Variant.Outlined"
                                  Required="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="long" @bind-Value="_restorePlan.DatabaseTargetId"
                               Label="Database Connection"
                               Variant="Variant.Outlined"
                               Required="true"
                               ToStringFunc="@(id => GetDatabaseTargetDisplayName(id))"
                               HelperText="Select the target database for restoration">
                        <MudSelectItem T="long" Value="0">Select Database Connection</MudSelectItem>
                        @foreach (var conn in _databaseConnections)
                        {
                            <MudSelectItem Value="@conn.Id">
                                @conn.HostName (@conn.Type)
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="long" @bind-Value="_restorePlan.SourceBackupPlanId"
                               Label="Source Backup Plan"
                               Variant="Variant.Outlined"
                               Required="true"
                               ToStringFunc="@(id => GetBackupPlanDisplayName(id))"
                               HelperText="Select the backup plan to restore from">
                        <MudSelectItem T="long" Value="0">Select Backup Plan</MudSelectItem>
                        @foreach (var plan in _backupPlans)
                        {
                            <MudSelectItem Value="@plan.Id">
                                @plan.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12">
                    <MudGrid Class="mt-2">
                        <MudItem xs="12" md="6">
                            <MudSelect T="ScheduleType"
                                       @bind-Value="_restorePlan.ScheduleType"
                                       Label="Schedule Type"
                                       Variant="Variant.Outlined"
                                       HelperText="How should this restore be triggered?">
                                @foreach (ScheduleType type in Enum.GetValues(typeof(ScheduleType)))
                                {
                                    <MudSelectItem Value="@type">@type.ToString()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        @if (_restorePlan.ScheduleType != ScheduleType.OneTime)
                        {
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="_restorePlan.ScheduleCron"
                                              Label="Cron Expression"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              HelperText="e.g., '0 0 * * *' for daily at midnight" />
                            </MudItem>
                        }
                        @if (Id is > 0)
                         {
                                <MudItem xs="12" md="6">
                                    <MudSwitch T="bool" @bind-Value="_restorePlan.IsActive"
                                               Label="Active" Color="Color.Primary" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudSwitch T="bool" @bind-Value="_restorePlan.OverwriteExisting"
                                               Label="Overwrite Existing" Color="Color.Warning" />
                                </MudItem>
                         }
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudCardContent>

    <!-- Section for selecting backup items to restore -->
    <MudCard Elevation="3" Class="mt-4 mb-4">
        <MudCardContent>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="ScanBackupItems">
                @if (_restorePlan.Items.Count > 0)
                {
                    <span>Re-Scan Backup Items</span>
                }
                else
                {
                    <span>Scan Backup Items</span>
                }
            </MudButton>
            @if (_restorePlan.Items.Count > 0)
            {
                <EnhancedBackupTree @bind-Items="_restorePlan.Items" />
            }
        </MudCardContent>
    </MudCard>

    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Success"
                   StartIcon="@Icons.Material.Filled.Save"
                   OnClick="SavePlan"
                   Disabled="@(_restorePlan.DatabaseTargetId == 0 || _restorePlan.SourceBackupPlanId == 0 || string.IsNullOrWhiteSpace(_restorePlan.Name))">
            Save Restore Plan
        </MudButton>
        <MudButton OnClick="@(() => NavigationManager.NavigateTo("/plans/restore"))">Back</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public long? Id { get; set; }

    private MudForm _form;
    private RestorePlan _restorePlan = new()
        {
            Name = string.Empty,
            Description = string.Empty,
            ScheduleCron = "0 0 * * *",
            ScheduleType = ScheduleType.OneTime,
            IsActive = false,
            OverwriteExisting = false,
            Items = new List<BackupItem>()
        };

    private HttpClient _httpClient;
    private List<DatabaseTarget> _databaseConnections = new();
    private List<BackupPlan> _backupPlans = new();

    protected override async Task OnInitializedAsync()
    {
        _httpClient = ClientFactory.CreateClient("SCREAM");

        _databaseConnections = await _httpClient.GetFromJsonAsync<List<DatabaseTarget>>("targets/database") ?? new();
        _backupPlans = await _httpClient.GetFromJsonAsync<List<BackupPlan>>("plans/backup") ?? new();

        if (Id is > 0)
        {
            var planFromApi = await _httpClient.GetFromJsonAsync<RestorePlan>($"plans/restore/{Id.Value}");
            if (planFromApi != null)
            {
                _restorePlan = planFromApi;
            }
            else
            {
                Snackbar.Add("Restore plan not found.", Severity.Error);
            }
        }
    }


    private async Task ScanBackupItems()
    {
        if (_restorePlan.DatabaseTargetId == 0 || _restorePlan.SourceBackupPlanId == 0)
        {
            Snackbar.Add("Please select a Database Connection and Source Backup Plan first.", Severity.Warning);
            return;
        }

        HashSet<string> selectedKeys = new();
        if (_restorePlan.Items.Count > 0)
        {
            selectedKeys = _restorePlan.Items
                .Where(i => i.IsSelected)
                .Select(i => $"{i.DatabaseItem.Type}:{i.DatabaseItem.Schema}:{i.DatabaseItem.Name}")
                .ToHashSet();
        }

        try
        {
            var response = await _httpClient.GetAsync($"plans/backup/{_restorePlan.SourceBackupPlanId}");
            if (response.IsSuccessStatusCode)
            {
                var backupPlan = await response.Content.ReadFromJsonAsync<BackupPlan>();
                if (backupPlan?.Items != null)
                {
                    var newItems = backupPlan.Items;
                    foreach (var item in newItems)
                    {
                        string key = $"{item.DatabaseItem.Type}:{item.DatabaseItem.Schema}:{item.DatabaseItem.Name}";
                        item.IsSelected = _restorePlan.Items.Count == 0 || selectedKeys.Contains(key);
                    }

                    _restorePlan.Items = newItems;
                    Snackbar.Add("Backup items loaded successfully from API.", Severity.Success);
                }
                else
                {
                    Snackbar.Add("No backup items found in the API response.", Severity.Warning);
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error scanning backup items from API: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error scanning backup items: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }


    private async Task SavePlan()
    {
        await _form.Validate();
        if (!_form.IsValid)
            return;

        IDialogReference dialog = null;
        try
        {
            var planToSave = new RestorePlan
                {
                    Id = _restorePlan.Id,
                    Name = _restorePlan.Name,
                    Description = _restorePlan.Description,
                    DatabaseTargetId = _restorePlan.DatabaseTargetId,
                    SourceBackupPlanId = _restorePlan.SourceBackupPlanId,
                    ScheduleType = _restorePlan.ScheduleType,
                    ScheduleCron = _restorePlan.ScheduleCron,
                    IsActive = _restorePlan.IsActive,
                    OverwriteExisting = _restorePlan.OverwriteExisting,
                    Items = _restorePlan.Items?.Where(i => i.IsSelected).ToList() ?? new List<BackupItem>()
                };
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    BackgroundClass = "my-custom-class",
                    BackdropClick = false,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small
                };

            var parameters = new DialogParameters
            {
                { "Message", "Saving restore plan. Please wait..." },
                { "Title", "Saving Restore Plan" }
            };
            dialog = await DialogService.ShowAsync<SavingProgressDialog>("Saving Restore Plan", parameters, options);
            HttpResponseMessage response = await _httpClient.PostAsJsonAsync("plans/restore", planToSave);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Restore plan {(Id is > 0 ? "updated" : "created")} successfully", Severity.Success);
                NavigationManager.NavigateTo("/plans/restore");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            dialog?.Close();
        }
    }

    private string GetDatabaseTargetDisplayName(long id)
    {
        if (id == 0)
            return "Select Database Connection";
        var target = _databaseConnections?.FirstOrDefault(t => t.Id == id);
        return target != null ? $"{target.HostName} ({target.Type})" : id.ToString();
    }

    private string GetBackupPlanDisplayName(long id)
    {
        if (id == 0)
            return "Select Backup Plan";
        var backupPlan = _backupPlans?.FirstOrDefault(b => b.Id == id);
        return backupPlan != null ? backupPlan.Name : id.ToString();
    }
}