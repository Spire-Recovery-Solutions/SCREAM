@page "/Storage/Local/{id:long?}"
@using SCREAM.Data.Entities.StorageTargets
@inject ISnackbar Snackbar

<MudText Align="Align.Center" Typo="Typo.h5" Class="mb-4">
   Local Storage Target
</MudText>

<MudForm @ref="_form">
    <MudStack Spacing="2">
        <MudTextField @bind-Value="_localTarget.Name" Label="Name" Variant="Variant.Outlined" Required="true" />
        <MudTextField @bind-Value="_localTarget.Description" Label="Description" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="_localTarget.Path" Label="Path" Variant="Variant.Outlined" Required="true" />
    </MudStack>

    <MudDivider Class="my-3" />

    <MudStack Row="true" Justify="Justify.Center">
        <MudButton OnClick="TestAndSaveLocalTarget" Color="Color.Primary" Variant="Variant.Filled">
            Test & Save Local Storage
        </MudButton>
    </MudStack>
</MudForm>

@code {
    [Parameter] public long? Id { get; set; }

    private MudForm _form;
    private LocalStorageTarget _localTarget = new LocalStorageTarget()
        {
            Name = string.Empty,
            Description = string.Empty,
            Path = string.Empty,
            Type = StorageTargetType.Local
        };

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            // _localTarget = await LocalStorageService.GetStorageTargetByIdAsync(Id.Value);
            _localTarget = new LocalStorageTarget()
                {
                    Id = Id.Value,
                    Name = $"Local Storage {Id.Value}",
                    Description = "This is fake data for testing.",
                    Path = @"C:\FakePath",
                    Type = StorageTargetType.Local
                };
        }
    }

    private async Task<bool> TestLocalStorageAsync()
    {
        await Task.Delay(500);
        // bool testPassed = await LocalStorageService.TestStorageAsync(localTarget.Path);
        bool testPassed = true;
        return testPassed;
    }

    private async Task TestAndSaveLocalTarget()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add("Please fill in the required fields.", Severity.Error);
            return;
        }

        bool testPassed = await TestLocalStorageAsync();
        if (!testPassed)
        {
            Snackbar.Add("Local storage test failed. Please check the path.", Severity.Error);
            return;
        }

        await Task.Delay(500);
        Snackbar.Add("Local Storage Target saved successfully.", Severity.Success);

        if (!Id.HasValue)
        {
            _localTarget = new LocalStorageTarget()
                {
                    Name = string.Empty,
                    Description = string.Empty,
                    Path = string.Empty,
                    Type = StorageTargetType.Local
                };
        }
        StateHasChanged();
    }
}