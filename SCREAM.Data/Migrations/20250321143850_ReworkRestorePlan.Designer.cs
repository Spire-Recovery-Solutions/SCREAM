// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCREAM.Data;

#nullable disable

namespace SCREAM.Data.Migrations
{
    [DbContext(typeof(ScreamDbContext))]
    [Migration("20250321143850_ReworkRestorePlan")]
    partial class ReworkRestorePlan
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupItemStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BackupItemId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BackupJobId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<int>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("BackupItemId");

                    b.HasIndex("BackupJobId");

                    b.ToTable("BackupItemStatuses", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupItems.BackupItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BackupPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("DatabaseItemId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("BackupPlanId");

                    b.HasIndex("DatabaseItemId");

                    b.ToTable("BackupItems", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BackupPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("BackupPlanId");

                    b.ToTable("BackupJobs", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupJobLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BackupItemStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BackupJobId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("BackupItemStatusId");

                    b.HasIndex("BackupJobId");

                    b.ToTable("BackupJobLogs", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("DatabaseConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextRun")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScheduleCron")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ScheduleType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StorageTargetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseConnectionId");

                    b.HasIndex("StorageTargetId");

                    b.ToTable("BackupPlans", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BackupHistoryRetentionDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(30);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DefaultMaxAllowedPacket")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("64M");

                    b.Property<int>("MaxAutoRetries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<string>("NotificationEmail")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SendEmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("BackupSettings", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Database.DatabaseItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("DatabaseItems", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SCREAM.Data.Entities.DatabaseConnection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DatabaseConnections", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestoreItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("DatabaseItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<long>("RestoreJobId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseItemId");

                    b.HasIndex("RestoreJobId");

                    b.ToTable("RestoreItems", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestoreJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsCompressed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEncrypted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<long>("RestorePlanId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("RestorePlanId");

                    b.ToTable("RestoreJobs", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestoreJobLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("RestoreItemId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RestoreJobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("RestoreItemId");

                    b.HasIndex("RestoreJobId");

                    b.ToTable("RestoreJobLogs", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestorePlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("DatabaseConnectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("OverwriteExisting")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SourceBackupJobId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseConnectionId");

                    b.HasIndex("SourceBackupJobId");

                    b.ToTable("RestorePlans", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestorePlanBackupItem", b =>
                {
                    b.Property<long>("BackupItemId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RestorePlanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BackupItemId", "RestorePlanId");

                    b.HasIndex("RestorePlanId");

                    b.ToTable("RestorePlanBackupItem");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestoreSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ImportTimeout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3600);

                    b.Property<int>("MaxAutoRetries")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NotificationEmail")
                        .HasColumnType("TEXT");

                    b.Property<bool>("OverwriteExistingByDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("SendEmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("UseParallelExecution")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("RestoreSettings", (string)null);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.StorageTargets.StorageTarget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("StorageTargets", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Database.DatabaseEventItems", b =>
                {
                    b.HasBaseType("SCREAM.Data.Entities.Database.DatabaseItem");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Database.DatabaseFunctionProcedureItems", b =>
                {
                    b.HasBaseType("SCREAM.Data.Entities.Database.DatabaseItem");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Database.DatabaseTableDataItems", b =>
                {
                    b.HasBaseType("SCREAM.Data.Entities.Database.DatabaseItem");

                    b.Property<long>("RowCount")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Database.DatabaseTableStructureItems", b =>
                {
                    b.HasBaseType("SCREAM.Data.Entities.Database.DatabaseItem");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Database.DatabaseTriggerItems", b =>
                {
                    b.HasBaseType("SCREAM.Data.Entities.Database.DatabaseItem");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Database.DatabaseViewItems", b =>
                {
                    b.HasBaseType("SCREAM.Data.Entities.Database.DatabaseItem");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.StorageTargets.AzureBlobStorageTarget", b =>
                {
                    b.HasBaseType("SCREAM.Data.Entities.StorageTargets.StorageTarget");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.StorageTargets.GoogleCloudStorageTarget", b =>
                {
                    b.HasBaseType("SCREAM.Data.Entities.StorageTargets.StorageTarget");

                    b.Property<string>("BucketName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceAccountKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("StorageTargets", t =>
                        {
                            t.Property("BucketName")
                                .HasColumnName("GoogleCloudStorageTarget_BucketName");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.StorageTargets.LocalStorageTarget", b =>
                {
                    b.HasBaseType("SCREAM.Data.Entities.StorageTargets.StorageTarget");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.StorageTargets.S3StorageTarget", b =>
                {
                    b.HasBaseType("SCREAM.Data.Entities.StorageTargets.StorageTarget");

                    b.Property<string>("AccessKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BucketName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupItemStatus", b =>
                {
                    b.HasOne("SCREAM.Data.Entities.Backup.BackupItems.BackupItem", "BackupItem")
                        .WithMany()
                        .HasForeignKey("BackupItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SCREAM.Data.Entities.Backup.BackupJob", null)
                        .WithMany("BackupItemStatuses")
                        .HasForeignKey("BackupJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackupItem");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupItems.BackupItem", b =>
                {
                    b.HasOne("SCREAM.Data.Entities.Backup.BackupPlan", null)
                        .WithMany("Items")
                        .HasForeignKey("BackupPlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCREAM.Data.Entities.Database.DatabaseItem", "DatabaseItem")
                        .WithMany()
                        .HasForeignKey("DatabaseItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DatabaseItem");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupJob", b =>
                {
                    b.HasOne("SCREAM.Data.Entities.Backup.BackupPlan", "BackupPlan")
                        .WithMany("Jobs")
                        .HasForeignKey("BackupPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackupPlan");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupJobLog", b =>
                {
                    b.HasOne("SCREAM.Data.Entities.Backup.BackupItemStatus", "BackupItemStatus")
                        .WithMany()
                        .HasForeignKey("BackupItemStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCREAM.Data.Entities.Backup.BackupJob", null)
                        .WithMany()
                        .HasForeignKey("BackupJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackupItemStatus");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupPlan", b =>
                {
                    b.HasOne("SCREAM.Data.Entities.DatabaseConnection", "DatabaseConnection")
                        .WithMany()
                        .HasForeignKey("DatabaseConnectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SCREAM.Data.Entities.StorageTargets.StorageTarget", "StorageTarget")
                        .WithMany()
                        .HasForeignKey("StorageTargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DatabaseConnection");

                    b.Navigation("StorageTarget");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestoreItem", b =>
                {
                    b.HasOne("SCREAM.Data.Entities.Database.DatabaseItem", "DatabaseItem")
                        .WithMany()
                        .HasForeignKey("DatabaseItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SCREAM.Data.Entities.Restore.RestoreJob", "RestoreJob")
                        .WithMany("RestoreItems")
                        .HasForeignKey("RestoreJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatabaseItem");

                    b.Navigation("RestoreJob");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestoreJob", b =>
                {
                    b.HasOne("SCREAM.Data.Entities.Restore.RestorePlan", "RestorePlan")
                        .WithMany("Jobs")
                        .HasForeignKey("RestorePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestorePlan");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestoreJobLog", b =>
                {
                    b.HasOne("SCREAM.Data.Entities.Restore.RestoreItem", "RestoreItem")
                        .WithMany()
                        .HasForeignKey("RestoreItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SCREAM.Data.Entities.Restore.RestoreJob", null)
                        .WithMany()
                        .HasForeignKey("RestoreJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestoreItem");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestorePlan", b =>
                {
                    b.HasOne("SCREAM.Data.Entities.DatabaseConnection", "DatabaseConnection")
                        .WithMany()
                        .HasForeignKey("DatabaseConnectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SCREAM.Data.Entities.Backup.BackupJob", "SourceBackupJob")
                        .WithMany()
                        .HasForeignKey("SourceBackupJobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DatabaseConnection");

                    b.Navigation("SourceBackupJob");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestorePlanBackupItem", b =>
                {
                    b.HasOne("SCREAM.Data.Entities.Backup.BackupItems.BackupItem", "BackupItem")
                        .WithMany()
                        .HasForeignKey("BackupItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCREAM.Data.Entities.Restore.RestorePlan", "RestorePlan")
                        .WithMany()
                        .HasForeignKey("RestorePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackupItem");

                    b.Navigation("RestorePlan");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupJob", b =>
                {
                    b.Navigation("BackupItemStatuses");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Backup.BackupPlan", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestoreJob", b =>
                {
                    b.Navigation("RestoreItems");
                });

            modelBuilder.Entity("SCREAM.Data.Entities.Restore.RestorePlan", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
